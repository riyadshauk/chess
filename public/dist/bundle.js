!function(e){var t={};function r(o){if(t[o])return t[o].exports;var s=t[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(o,s,function(t){return e[t]}.bind(null,s));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);class o{constructor(e="blank"){this.name="empty",this.color=e,this.getPossibleMoves=((e,t,r)=>{return e=>!1})}}class s{get board(){return Object.assign([],this._board)}get rankCount(){return this._board.length}get fileCount(){return this._board[0].length>0?this._board[0].length:1}constructor(e){this._board=e instanceof s?e._board:e||[["r0","h0","b0","q0","k0","b0","h0","r0"],["p0","p0","p0","p0","p0","p0","p0","p0"],[" "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "],[" "," "," "," "," "," "," "," "],["P0","P0","P0","P0","P0","P0","P0","P0"],["R0","H0","B0","Q0","K0","B0","H0","R0"]],this.getEncoding=(e=>this._board[e.r][e.c]),this.setEncoding=((e,t)=>{e.r>-1&&e.r<this._board.length&&e.c>-1&&e.c<this._board[0].length&&(this._board[e.r][e.c]=t)})}}class n{get player(){return this._player}set player(e){this._player=e}get board(){return this._board.board}constructor(e){this._board=new s(e),this.getEncoding=(e=>this._board.getEncoding(e)),this._player=c,this.rankCount=this._board.rankCount,this.fileCount=this._board.fileCount}}class i{array2d(e,t){const r=[];for(let o=0;o<e;o++){r.push([]);for(let s=0;s<e;s++)r[o].push(t)}return r}initializeFalseGrid(e){return this.array2d(e,!1)}constructor(e){this.gameState=e?e.gameState:new n,this.selectedBoxes=e?e.selectedBoxes:this.initializeFalseGrid(8),this.possibleDestBoxes=e?e.possibleDestBoxes:this.initializeFalseGrid(8),this.prevMove=e?e.prevMove:{src:{r:-1,c:-1},dst:{r:-1,c:-1}},this.captures=e?e.captures:[],this.selectedCaptures=e?e.selectedCaptures:[],this.board=e?e.board:[]}}const c=0,a=1;class l{constructor(){this._state=new i}get state(){return this._state}set state(e){this._state.gameState=e.gameState?e.gameState:this._state.gameState,this._state.board=e.board?e.board:this._state.board,this._state.selectedBoxes=e.selectedBoxes?e.selectedBoxes:this._state.selectedBoxes,this._state.possibleDestBoxes=e.possibleDestBoxes?e.possibleDestBoxes:this._state.possibleDestBoxes,this._state.prevMove=e.prevMove?e.prevMove:this._state.prevMove,this._state.captures=e.captures?e.captures:this._state.captures,this._state.selectedCaptures=e.selectedCaptures?e.selectedCaptures:this._state.selectedCaptures}}function u(e,t){return(t||document).querySelector(e)}function d(e,t,r,o){e.addEventListener(t,r,!!o)}class h{Board(e){const t=e.board;let r=document.createElement("board"),o=0;for(let s=0;s<8;s++){let n=document.createElement("tr");for(let r=0;r<8;r++){let i=document.createElement("td");i.setAttribute("data-pos",String(o));const c=t[s][r];if(i.setAttribute("piece",JSON.stringify(c)),c){let e=document.createElement("div");e.setAttribute("class",c.color+c.name),i.appendChild(e)}e.selectedBoxes[s][r]&&i.setAttribute("class","selected"),e.possibleDestBoxes[s][r]&&i.setAttribute("class","possibleDest"),n.appendChild(i),o++}r.appendChild(n)}return r}Captured(e,t){const r=t.captures,o=t.selectedCaptures;let s=document.createElement("tr");for(let t=0;t<r.length;t++){const n=r[t];if(n.color&&0==n.color.indexOf(e)){let e=document.createElement("td"),r=document.createElement("div");r.setAttribute("class",n.color+n.name),o[t]&&r.setAttribute("class",n.color+n.name+" selectedCapture"),e.appendChild(r),s.appendChild(e)}}return s}CapturedWhite(e){return this.Captured("white",e)}CapturedBlack(e){return this.Captured("black",e)}}class g{constructor(){this._template=new h,this._$board=u(".chessboard"),this._$capturedwhite=u(".capturedwhite"),this._$capturedblack=u(".capturedblack"),this._$main=u(".main"),this._$undobtn=u(".undo"),this._$redobtn=u(".redo")}get $board(){return this._$board}get $capturedwhite(){return this._$capturedwhite}get $capturedblack(){return this._$capturedblack}showBoard(e){this.$board.replaceChild(this._template.Board(e),this.$board.firstChild)}showCaptures(e){this.$capturedwhite.replaceChild(this._template.CapturedWhite(e),this.$capturedwhite.firstChild),this.$capturedblack.replaceChild(this._template.CapturedBlack(e),this.$capturedblack.firstChild)}bindSelectBox(e,t){d(e,"click",()=>t(e))}bindCapturedPiece(e,t,r){d(e,"click",()=>r(e,t))}bindUndoMove(e){}bindRedoMove(e){}}r(2);const p={getNumMoves:(e,t)=>-1,isEmpty:(e,t)=>!1,isPieceOfGivenPlayer:(e,t,r)=>!1,isPieceOfCurrentPlayer:(e,t)=>!1,isBoxOnBoard:(e,t)=>!1,isValidSourceAndDest:(e,t,r)=>!1,canGoAlongRowToDest:(e,t,r)=>!1,canGoAlongColToDest:(e,t,r)=>!1,canGoAlongLineToDest:(e,t,r)=>!1,canGoAlongDiagonalToDest:(e,t,r)=>!1};p.getNumMoves=((e,t)=>{let r=e.getEncoding(t).match(/([a-zA-z])(\d*)/);return r&&r.length>2&&!isNaN(Number(r[2]))?Number(r[2]):-1}),p.isEmpty=((e,t)=>""===e.getEncoding(t).trim()),p.isPieceOfGivenPlayer=((e,t,r)=>{let o=e.getEncoding(r).match(/([a-zA-z])(\d*)/),s=o.length>1?o[1]:null;return!!s&&(t==c&&s==s.toUpperCase()||t==a&&s==s.toLowerCase())}),p.isPieceOfCurrentPlayer=((e,t)=>{const r=(r,{c:o,r:s}=t)=>e.getEncoding(t)===r.apply(e.getEncoding(t))&&!p.isEmpty(e,t);return e.player===c?r(String.prototype.toUpperCase):r(String.prototype.toLowerCase)}),p.isBoxOnBoard=((e,t)=>t.r<e.rankCount&&t.r>=0&&t.c>=0&&t.c<e.fileCount),p.isValidSourceAndDest=((e,t,r)=>p.isPieceOfCurrentPlayer(e,t)&&!p.isPieceOfCurrentPlayer(e,r)&&p.isBoxOnBoard(e,r)&&t!=r),p.canGoAlongRowToDest=((e,t,r)=>{if(t.r==r.r){const o=r.c>t.c?1:-1;let s=Math.abs(r.c-t.c);for(let r=t.c+o;s-- >1;r+=o)if(!p.isEmpty(e,{r:t.r,c:r}))return!1;return!0}return!1}),p.canGoAlongColToDest=((e,t,r)=>{if(t.c==r.c){const o=r.r>t.r?1:-1;let s=Math.abs(r.r-t.r);for(let r=t.r+o;s-- >1;r+=o)if(!p.isEmpty(e,{r:r,c:t.c}))return!1;return!0}return!1}),p.canGoAlongLineToDest=((e,t,r)=>p.canGoAlongColToDest(e,t,r)||p.canGoAlongRowToDest(e,t,r)),p.canGoAlongDiagonalToDest=((e,t,r)=>{if(1!=Math.abs((r.r-t.r)/(r.c-t.c)))return!1;let o=Math.abs(r.c-t.c);const s=r.r-t.r>0?1:-1,n=r.c-t.c>0?1:-1;let i=t.r+s,c=t.c+n;for(;o-- >1;i+=s,c+=n)if(!p.isEmpty(e,{r:i,c:c}))return!1;return!0});class f{constructor(e){this.name="pawn",this.color=e,this.getPossibleMoves=((e,t,r)=>{void 0===r&&(r=p.getNumMoves(e,t));return o=>{if(!p.isValidSourceAndDest(e,t,o))return!1;const s=(()=>e.player==c?-1:1)(),n=p.isEmpty(e,o)&&t.c==o.c&&o.r==t.r+s,i={r:t.r+s,c:o.c},a=0==r&&p.isEmpty(e,o)&&p.isEmpty(e,i)&&t.c==o.c&&o.r==t.r+2*s,l=!(p.isPieceOfCurrentPlayer(e,o)||p.isEmpty(e,o)||o.r!=t.r+s||o.c!=t.c+1&&o.c!=t.c-1);return(n||a||l)&&!p.isPieceOfCurrentPlayer(e,o)}})}}class b{constructor(e){this.name="rook",this.color=e,this.getPossibleMoves=((e,t,r)=>{return r=>!!p.isValidSourceAndDest(e,t,r)&&(p.canGoAlongRowToDest(e,t,r)||p.canGoAlongColToDest(e,t,r))})}}class m{constructor(e){this.name="knight",this.color=e,this.getPossibleMoves=((e,t,r)=>{return r=>!(!p.isValidSourceAndDest(e,t,r)||!(1==Math.abs(t.r-r.r)&&2==Math.abs(t.c-r.c)||1==Math.abs(t.c-r.c)&&2==Math.abs(t.r-r.r)))})}}class v{constructor(e){this.name="bishop",this.color=e,this.getPossibleMoves=function(e,t,r){return r=>!!p.isValidSourceAndDest(e,t,r)&&p.canGoAlongDiagonalToDest(e,t,r)}}}class P{constructor(e){this.name="queen",this.color=e,this.getPossibleMoves=((e,t,r)=>{return r=>!!p.isValidSourceAndDest(e,t,r)&&(p.canGoAlongRowToDest(e,t,r)||p.canGoAlongColToDest(e,t,r)||p.canGoAlongDiagonalToDest(e,t,r))})}}class w{constructor(e,t){this.name="king",this.color=e,this.getPossibleSpecialMoves=t,this.getPossibleMoves=((e,t,r)=>{return r=>!(!p.isValidSourceAndDest(e,t,r)||1!=Math.abs(r.c-t.c)&&1!=Math.abs(r.r-t.r))&&(p.canGoAlongRowToDest(e,t,r)||p.canGoAlongColToDest(e,t,r)||p.canGoAlongDiagonalToDest(e,t,r))})}}const C={convertGSBoardToPieceBoard:e=>[],convertPieceToStringEncoding:(e,t)=>"",getType:e=>new o,getNumMoves:e=>-1,getPossiblePiecesToPromoteTo:(e,t)=>[],getPossibleMoves:(e,t,r)=>[{r:-1,c:-1}],isPossibleToMoveTo:(e,t)=>e=>!1,isInCheck:(e,t)=>!1,isInCheckmate:(e,t)=>!1,kingCanCastleWithGivenRook:(e,t,r)=>!1,castleKingWithGivenRook:(e,t,r)=>e,getSetOfAllPossibleMovesForPlayer:(e,t)=>new Set,randomDefensiveMove:e=>new Set,isACapture:(e,t,r)=>!1,isEnPassantPossible:(e,t,r)=>!1,getBoxOfPromotablePieceIfPossible:e=>({r:-1,c:-1}),promoteIfPossible:(e,t,r)=>e,incrementMoveCount:e=>"",makeLegalMove:(e,t,r,s,n)=>({gameState:e,capturedPiece:new o,wasPromotion:!1})};C.convertGSBoardToPieceBoard=(e=>{const t=[];for(let r=0;r<e.rankCount;r++){t.push([]);for(let o=0;o<e.fileCount;o++)t[r].push(C.getType(e.getEncoding({r:r,c:o})))}return t}),C.convertPieceToStringEncoding=((e,t=0)=>{let r="";return e instanceof f&&(r="white"===e.color?"P":"p"),e instanceof b&&(r="white"===e.color?"R":"r"),e instanceof m&&(r="white"===e.color?"H":"h"),e instanceof v&&(r="white"===e.color?"B":"b"),e instanceof P&&(r="white"===e.color?"Q":"q"),e instanceof w&&(r="white"===e.color?"K":"k"),r=r?r+t:r}),C.getType=(e=>{if(""===e.trim())return new o;let t=e.match(/([a-zA-z])(\d*)/),r=t&&t.length>2?Number(t[2]):void 0,s=t.length>1?t[1]:void 0;if(void 0===r||void 0===s)return new o;switch(s.trim()){case"p":return new f("black");case"r":return new b("black");case"h":return new m("black");case"b":return new v("black");case"q":return new P("black");case"k":return new w("black",C.kingCanCastleWithGivenRook);case"P":return new f("white");case"R":return new b("white");case"H":return new m("white");case"B":return new v("white");case"Q":return new P("white");case"K":return new w("white",C.kingCanCastleWithGivenRook);case"":default:return new o}}),C.getNumMoves=(e=>{const t=e.match(/([a-zA-z])(\d*)/);return t&&t.length>2&&!Number.isNaN(Number(t[2]))?Number(t[2]):-1}),C.getPossiblePiecesToPromoteTo=((e,t)=>{const r=[];if(void 0!==C.getBoxOfPromotablePieceIfPossible(e)){const s=C.getType(e.getEncoding(t));for(let t=0;t<e.rankCount;t++)for(let n=0;n<e.fileCount;n++){const i={r:t,c:n},c=C.getType(e.getEncoding({r:t,c:n}));s.color!==c.color||c instanceof f||c instanceof w||c instanceof o||r.push(i)}}return r}),C.getPossibleMoves=((e,t,r)=>{const o=C.getPossiblePiecesToPromoteTo(e,t);if(o.length>0)return o;const s=e.getEncoding(t),n=C.getNumMoves(s),i=C.getType(s);if(i&&!isNaN(n)){const o=((e,t,r,o)=>{const s=[],n="function"==typeof r.getPossibleMoves?r.getPossibleMoves(e,t,o):e=>!1;if(!n)return s;for(let t=0;t<e.rankCount;t++)for(let r=0;r<e.fileCount;r++)n({r:t,c:r})&&s.push({r:t,c:r});return s})(e,t,i,n);if(C.getType(e.getEncoding(t))instanceof w&&(C.kingCanCastleWithGivenRook(e,t,{r:t.r,c:0})&&o.push({r:t.r,c:0}),C.kingCanCastleWithGivenRook(e,t,{r:t.r,c:e.fileCount-1})&&o.push({r:t.r,c:e.fileCount-1})),C.getType(e.getEncoding(t))instanceof f)if(void 0===r)console.warn("PieceGameLogic.getPossibleMoves should be passed prevMove as last parameter! Please refactor, else En Passante will not work.");else if(C.isEnPassantPossible(e,t,r)){const e=r.dst.c-r.src.c>0?1:-1;o.push({r:t.r+e,c:r.dst.c})}return o}return[]}),C.isPossibleToMoveTo=((e,t)=>{const r=e.getEncoding(t);C.getNumMoves(r);return C.getType(r).getPossibleMoves(e,t)}),C.isInCheck=((e,t)=>{for(let r=0;r<e.rankCount;r++)for(let o=0;o<e.fileCount;o++)if(t.r!=r&&t.c!=o){const s=C.getPossibleMoves(e,{r:r,c:o});for(let e=0;e<s.length;e++)if(s[e].r==t.r&&s[e].c==t.c)return!0}return!1}),C.isInCheckmate=((e,t)=>{const r=C.getPossibleMoves(e,t);if(C.isInCheck(e,t)){let t=!0;for(let o=0;o<r.length;o++)t=t&&C.isInCheck(e,r[o]);if(t)return!0}return!1}),C.kingCanCastleWithGivenRook=((e,t,r)=>{const o=e.getEncoding(t),s=e.getEncoding(r);if(C.getType(o).name!=new w("").name||C.getType(s).name!=new b("").name||0!=C.getNumMoves(o)||0!=C.getNumMoves(s))return!1;if(p.isPieceOfCurrentPlayer(e,t)&&p.isPieceOfCurrentPlayer(e,r)&&p.isBoxOnBoard(e,r)&&t!=r){let o=r.c-t.c>0?1:-1,s=Math.abs(r.c-t.c);for(let r=t.c+o;s-- >1;r+=o)if(!p.isEmpty(e,{r:t.r,c:r}))return!1;return!0}}),C.castleKingWithGivenRook=((e,t,r)=>{if(!C.kingCanCastleWithGivenRook(e,t,r))return e;const o=new s(e.board);o.setEncoding(t,C.incrementMoveCount(e.getEncoding(t)));let i=r.c-t.c>0?1:-1,c=0;return 3==Math.abs(r.c-t.c)?c=2:4==Math.abs(r.c-t.c)&&(c=3),o.setEncoding({r:t.r,c:t.c+i*c},e.getEncoding(t)),o.setEncoding(t," "),o.setEncoding({r:r.r,c:r.c-i*c},e.getEncoding(r)),o.setEncoding(r," "),new n(o)}),C.getSetOfAllPossibleMovesForPlayer=((e,t)=>{let r=new Set;for(let o=0;o<e.rankCount;o++)for(let s=0;s<e.fileCount;s++)if(!p.isPieceOfGivenPlayer(e,t,{r:o,c:s})&&!p.isEmpty(e,{r:o,c:s})){const t=C.getPossibleMoves(e,{r:o,c:s});for(let e=0;e<t.length;e++)r.add(t[e])}return r}),C.randomDefensiveMove=(e=>{const t=0==e.player?1:0;return C.getSetOfAllPossibleMovesForPlayer(e,t)}),C.isACapture=((e,t,r)=>{const o=e.getEncoding(t),s=C.getNumMoves(o),n=C.getType(o);if("function"==typeof n.getPossibleMoves&&!isNaN(s)){if(n.getPossibleMoves(e,t,s)(r)&&!p.isPieceOfCurrentPlayer(e,r)&&!p.isEmpty(e,r))return!0}return!1}),C.isEnPassantPossible=((e,t,r)=>{const o=r.dst.r-r.src.r>0?1:6;r.dst.r,r.src.r;return C.getType(e.getEncoding(t))instanceof f&&2===Math.abs(r.dst.r-r.src.r)&&r.dst.r===t.r&&o===r.src.r&&C.getType(e.getEncoding(r.dst))instanceof f&&!p.isPieceOfCurrentPlayer(e,r.dst)}),C.getBoxOfPromotablePieceIfPossible=(e=>{const t=t=>{for(let r=0;r<e.rankCount;r++)if(C.getType(e.getEncoding({r:t,c:r}))instanceof f)return{r:t,c:r}};return t(0)||t(e.rankCount-1)}),C.promoteIfPossible=((e,t,r)=>{const i=C.getBoxOfPromotablePieceIfPossible(e),c=new s(e.board);return void 0===i||i.r!==t.r||i.c!==t.c||r instanceof f||r instanceof w||r instanceof o||C.getType(e.getEncoding(t)).color!==r.color||c.setEncoding(t,C.convertPieceToStringEncoding(r)),new n(c)}),C.incrementMoveCount=(e=>{const t=e.trim().match(/\w/g)?e.trim().match(/\w/g)[0]:"",r=e.trim().match(/(\d+)/g)?Number(e.trim().match(/(\d+)/g)[0]):0;return t+Number(r+1)}),C.makeLegalMove=((e,t,r,i,c)=>{if(void 0!==C.getBoxOfPromotablePieceIfPossible(e))return void 0===c&&(c=C.getType(e.getEncoding(r))),{gameState:C.promoteIfPossible(e,t,c),capturedPiece:new o,wasPromotion:!0};if(C.kingCanCastleWithGivenRook(e,t,r))return{gameState:C.castleKingWithGivenRook(e,t,r),capturedPiece:new o,wasPromotion:!1};const a=o=>{const i=o?C.getType(e.getEncoding(o)):C.getType(e.getEncoding(r)),c=new s(e.board);return o&&c.setEncoding(o," "),c.setEncoding(r,C.incrementMoveCount(e.getEncoding(t))),c.setEncoding(t," "),{gameState:new n(c),capturedPiece:i,wasPromotion:!1}};if(C.isEnPassantPossible(e,t,i)){const e=i.dst.r-i.src.r>0?-1:1,o={r:t.r+e,c:i.dst.c};if(r.r===o.r&&r.c===o.c)return a(i.dst)}const l=C.getPossibleMoves(e,t,i);for(let t=0;t<l.length;t++){const o=l[t];if(r.r===o.r&&r.c===o.c&&!p.isPieceOfCurrentPlayer(e,r))return a()}return{gameState:e,capturedPiece:new o,wasPromotion:!1}});const y=e=>{let t=Number(e.getAttribute("data-pos"));return{box:{r:Math.floor(t/8),c:t%8},piece:JSON.parse(e.getAttribute("piece"))}};new class{createAndShowInitialBoard(){const e=new i;e.board=C.convertGSBoardToPieceBoard(e.gameState),this.store.state=e,this.showBoardAndBindBoxes()}setStoreState(e){e.board=C.convertGSBoardToPieceBoard(e.gameState),this.store.state=e}constructor(){this.store=new l,this.view=new g,this._selectedBox={box:{r:-1,c:-1},piece:new o},this._lastSelectedBox={box:{r:-1,c:-1},piece:new o},this._selectedCapturedPiece=new o,this.createAndShowInitialBoard()}showBoardAndBindBoxes(){this.view.showBoard(this.store.state);for(let e=0;e<8;e++)for(let t=0;t<8;t++){let r=this.view.$board.children[0].children[e].children[t];this.view.bindSelectBox(r,this.selectBox.bind(this))}}showAndBindCapturedPieces(){let e=this.store.state.captures;this.view.showCaptures(this.store.state);let t=0,r=0;for(let o=0;o<e.length;o++)if(e[o].color&&0==e[o].color.indexOf("black")){let e=this.view.$capturedblack.children[0].children[r++];void 0!=e&&this.view.bindCapturedPiece(e,o,this.selectCapturedPiece.bind(this))}else if(e[o].color&&0==e[o].color.indexOf("white")){let e=this.view.$capturedwhite.children[0].children[t++];void 0!=e&&this.view.bindCapturedPiece(e,o,this.selectCapturedPiece.bind(this))}}moveXorGetPossibleMoves(){if(!(this._lastSelectedBox.piece instanceof o)){const e=C.makeLegalMove(this.store.state.gameState,this._lastSelectedBox.box,this._selectedBox.box,this.store.state.prevMove,this._selectedCapturedPiece),t=new i(this.store.state);t.gameState=e.gameState;const r=e.capturedPiece;if(this.store.state.gameState!==t.gameState)t.possibleDestBoxes=this.store.state.initializeFalseGrid(8),t.prevMove={src:this._lastSelectedBox.box,dst:this._selectedBox.box},t.gameState.player=this.store.state.gameState.player===c?a:c,e.wasPromotion&&(t.gameState.player=t.gameState.player===c?a:c),r instanceof o||t.captures.push(r);else{const e=C.getPossibleMoves(this.store.state.gameState,this._selectedBox.box,this.store.state.prevMove);t.possibleDestBoxes=this.store.state.initializeFalseGrid(8),e.forEach(e=>{t.possibleDestBoxes[e.r][e.c]=!0})}this.setStoreState(t)}this._selectedCapturedPiece=void 0}selectBox(e){this._lastSelectedBox=this._selectedBox,this._selectedBox=y(e),this.showAndBindCapturedPieces(),this.showBoardAndBindBoxes(),this.moveXorGetPossibleMoves(),this.showAndBindCapturedPieces(),this.showBoardAndBindBoxes()}selectCapturedPiece(e,t){this._selectedCapturedPiece=this.store.state.captures[t],this.showAndBindCapturedPieces(),this.showBoardAndBindBoxes()}undoMove(){}redoMove(){}loadBoard(){}saveBoard(){}}},function(e,t){var r,o,s=e.exports={};function n(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function c(e){if(r===setTimeout)return setTimeout(e,0);if((r===n||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:n}catch(e){r=n}try{o="function"==typeof clearTimeout?clearTimeout:i}catch(e){o=i}}();var a,l=[],u=!1,d=-1;function h(){u&&a&&(u=!1,a.length?l=a.concat(l):d=-1,l.length&&g())}function g(){if(!u){var e=c(h);u=!0;for(var t=l.length;t;){for(a=l,l=[];++d<t;)a&&a[d].run();d=-1,t=l.length}a=null,u=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===i||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function f(){}s.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];l.push(new p(e,t)),1!==l.length||u||c(g)},p.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=f,s.addListener=f,s.once=f,s.off=f,s.removeListener=f,s.removeAllListeners=f,s.emit=f,s.prependListener=f,s.prependOnceListener=f,s.listeners=function(e){return[]},s.binding=function(e){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},function(e,t,r){(function(e){function r(e,t){for(var r=0,o=e.length-1;o>=0;o--){var s=e[o];"."===s?e.splice(o,1):".."===s?(e.splice(o,1),r++):r&&(e.splice(o,1),r--)}if(t)for(;r--;r)e.unshift("..");return e}var o=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,s=function(e){return o.exec(e).slice(1)};function n(e,t){if(e.filter)return e.filter(t);for(var r=[],o=0;o<e.length;o++)t(e[o],o,e)&&r.push(e[o]);return r}t.resolve=function(){for(var t="",o=!1,s=arguments.length-1;s>=-1&&!o;s--){var i=s>=0?arguments[s]:e.cwd();if("string"!=typeof i)throw new TypeError("Arguments to path.resolve must be strings");i&&(t=i+"/"+t,o="/"===i.charAt(0))}return t=r(n(t.split("/"),function(e){return!!e}),!o).join("/"),(o?"/":"")+t||"."},t.normalize=function(e){var o=t.isAbsolute(e),s="/"===i(e,-1);return(e=r(n(e.split("/"),function(e){return!!e}),!o).join("/"))||o||(e="."),e&&s&&(e+="/"),(o?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(n(e,function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},t.relative=function(e,r){function o(e){for(var t=0;t<e.length&&""===e[t];t++);for(var r=e.length-1;r>=0&&""===e[r];r--);return t>r?[]:e.slice(t,r-t+1)}e=t.resolve(e).substr(1),r=t.resolve(r).substr(1);for(var s=o(e.split("/")),n=o(r.split("/")),i=Math.min(s.length,n.length),c=i,a=0;a<i;a++)if(s[a]!==n[a]){c=a;break}var l=[];for(a=c;a<s.length;a++)l.push("..");return(l=l.concat(n.slice(c))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){var t=s(e),r=t[0],o=t[1];return r||o?(o&&(o=o.substr(0,o.length-1)),r+o):"."},t.basename=function(e,t){var r=s(e)[2];return t&&r.substr(-1*t.length)===t&&(r=r.substr(0,r.length-t.length)),r},t.extname=function(e){return s(e)[3]};var i="b"==="ab".substr(-1)?function(e,t,r){return e.substr(t,r)}:function(e,t,r){return t<0&&(t=e.length+t),e.substr(t,r)}}).call(this,r(1))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,