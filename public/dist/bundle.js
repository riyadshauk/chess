!function(e){var t={};function s(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,s),o.l=!0,o.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},s.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";function i(e){return{pos:e,r:Math.trunc(e/8),c:e%8,piece:null,selected:!1,possibleDest:!1}}function o(e){return{title:e,timesMoved:0,capturedIdx:-1,selectedCapture:!1}}s.r(t);const r=0,l=1,c=e=>{let t=i(Number(e.getAttribute("data-pos")));return e.querySelector("div")&&(t.piece=o(e.querySelector("div").getAttribute("class"))),t},n=e=>o(e.firstChild.getAttribute("class")),a=e=>({r:e.r,c:e.c});function d(e,t){return(t||document).querySelector(e)}function h(e,t,s,i){e.addEventListener(t,s,!!i)}s(2);class u{constructor(){this.name="empty",this.getPossibleMoves=((e,t,s)=>{return e=>!1})}}const p={getNumMoves:(e,t)=>-1,isEmpty:(e,t)=>!1,isPieceOfGivenPlayer:(e,t,s)=>!1,isPieceOfCurrentPlayer:(e,t)=>!1,isBoxOnBoard:(e,t)=>!1,isValidSourceAndDest:(e,t,s)=>!1,canGoAlongRowToDest:(e,t,s)=>!1,canGoAlongColToDest:(e,t,s)=>!1,canGoAlongLineToDest:(e,t,s)=>!1,canGoAlongDiagonalToDest:(e,t,s)=>!1};p.getNumMoves=((e,t)=>{const{c:s,r:i}=t;let o=e.board[i][s].match(/([a-zA-z])(\d*)/);return o&&o.length>2&&!isNaN(o[2])?Number(o[2]):-1}),p.isEmpty=((e,t)=>{const{c:s,r:i}=t;return""===e.board[i][s].trim()}),p.isPieceOfGivenPlayer=((e,t,s)=>{let i=e.board[s.r][s.c].match(/([a-zA-z])(\d*)/),o=i.length>1?i[1]:null;return!!o&&(0==t&&o==o.toUpperCase()||1==t&&o==o.toLowerCase())}),p.isPieceOfCurrentPlayer=((e,t)=>{const s=(s,{c:i,r:o}=t)=>e.board[o][i]==s.apply(e.board[o][i])&&!p.isEmpty(e,t);return e.player==e.playerWhite?s(String.prototype.toUpperCase):s(String.prototype.toLowerCase)}),p.isBoxOnBoard=((e,t)=>t.r<e.numRows&&t.r>=0&&t.c>=0&&t.c<e.numCols),p.isValidSourceAndDest=((e,t,s)=>p.isPieceOfCurrentPlayer(e,t)&&!p.isPieceOfCurrentPlayer(e,s)&&p.isBoxOnBoard(e,s)&&t!=s),p.canGoAlongRowToDest=((e,t,s)=>{if(t.r==s.r){const i=s.c>t.c?1:-1;let o=Math.abs(s.c-t.c);for(let s=t.c+i;o-- >1;s+=i)if(!p.isEmpty(e,{r:t.r,c:s}))return!1;return!0}return!1}),p.canGoAlongColToDest=((e,t,s)=>{if(t.c==s.c){const i=s.r>t.r?1:-1;let o=Math.abs(s.r-t.r);for(let s=t.r+i;o-- >1;s+=i)if(!p.isEmpty(e,{r:s,c:t.c}))return!1;return!0}return!1}),p.canGoAlongLineToDest=((e,t,s)=>p.canGoAlongColToDest(e,t,s)||p.canGoAlongRowToDest(e,t,s)),p.canGoAlongDiagonalToDest=((e,t,s)=>{if(1!=Math.abs((s.r-t.r)/(s.c-t.c)))return!1;let i=Math.abs(s.c-t.c);const o=s.r-t.r>0?1:-1,r=s.c-t.c>0?1:-1;let l=t.r+o,c=t.c+r;for(;i-- >1;l+=o,c+=r)if(!p.isEmpty(e,{r:l,c:c}))return!1;return!0});class v{constructor(){this.name="rook",this.getPossibleMoves=((e,t,s)=>{return s=>!!p.isValidSourceAndDest(e,t,s)&&(p.canGoAlongRowToDest(e,t,s)||p.canGoAlongColToDest(e,t,s))})}}class g{constructor(e){this.name="king",this.getPossibleSpecialMoves=e,this.getPossibleMoves=((e,t,s)=>{return s=>!(!p.isValidSourceAndDest(e,t,s)||1!=Math.abs(s.c-t.c)&&1!=Math.abs(s.r-t.r))&&(p.canGoAlongRowToDest(e,t,s)||p.canGoAlongColToDest(e,t,s)||p.canGoAlongDiagonalToDest(e,t,s))})}}const b={getType:e=>new u,getNumMoves:e=>-1,getPossibleMoves:(e,t)=>[{r:-1,c:-1}],isPossibleToMoveTo:(e,t)=>e=>!1,isInCheck:(e,t)=>!1,isInCheckmate:(e,t)=>!1,kingCanCastleWithGivenRook:(e,t,s)=>!1,castleKingWithGivenRook:(e,t,s)=>!1,getSetOfAllPossibleMovesForPlayer:(e,t)=>new Set,randomDefensiveMove:e=>new Set,isACapture:(e,t,s)=>!1};b.getType=(e=>{if(""===e.trim())return new u;let t=e.match(/([a-zA-z])(\d*)/),s=t&&t.length>2?t[2]:null,i=t.length>1?t[1]:null;if(!s||!i)return new u;switch(i.toLowerCase().trim()){case"p":return new class{constructor(){this.name="pawn",this.getPossibleMoves=((e,t,s)=>(void 0===s&&(s=p.getNumMoves(e,t)),i=>{if(!p.isValidSourceAndDest(e,t,i))return!1;const o=(()=>e.player==e.playerWhite?-1:1)(),r=p.isEmpty(e,i)&&t.c==i.c&&i.r==t.r+o,l={r:t.r+o,c:i.c},c=0==s&&p.isEmpty(e,i)&&p.isEmpty(e,l)&&t.c==i.c&&i.r==t.r+2*o,n=!(p.isPieceOfCurrentPlayer(e,i)||p.isEmpty(e,i)||i.r!=t.r+o||i.c!=t.c+1&&i.c!=t.c-1);return r||c||n}))}};case"r":return new v;case"h":return new class{constructor(){this.name="knight",this.getPossibleMoves=((e,t,s)=>s=>!(!p.isValidSourceAndDest(e,t,s)||!(1==Math.abs(t.r-s.r)&&2==Math.abs(t.c-s.c)||1==Math.abs(t.c-s.c)&&2==Math.abs(t.r-s.r))))}};case"b":return new class{constructor(){this.name="bishop",this.getPossibleMoves=function(e,t,s){return s=>!!p.isValidSourceAndDest(e,t,s)&&p.canGoAlongDiagonalToDest(e,t,s)}}};case"q":return new class{constructor(){this.name="queen",this.getPossibleMoves=((e,t,s)=>s=>!!p.isValidSourceAndDest(e,t,s)&&(p.canGoAlongRowToDest(e,t,s)||p.canGoAlongColToDest(e,t,s)||p.canGoAlongDiagonalToDest(e,t,s)))}};case"k":return new g(b.kingCanCastleWithGivenRook);case"":default:return new u}}),b.getNumMoves=(e=>{let t=e.match(/([a-zA-z])(\d*)/);return t&&t.length>2&&!Number.isNaN(Number(t[2]))?Number(t[2]):-1}),b.getPossibleMoves=((e,t)=>{const s=e.board[t.r][t.c],i=b.getNumMoves(s),o=b.getType(s);return o&&!isNaN(i)?((e,t,s,i)=>{let o=[];const r="function"==typeof s.getPossibleMoves?s.getPossibleMoves(e,t,i):e=>!1;if(!r)return o;for(let t=0;t<e.board.length;t++)for(let s=0;s<e.board[0].length;s++)r({r:t,c:s})&&o.push({r:t,c:s});return o})(e,t,o,i):[]}),b.isPossibleToMoveTo=((e,t)=>{const s=e.board[t.r][t.c];b.getNumMoves(s);return b.getType(s).getPossibleMoves(e,t)}),b.isInCheck=((e,t)=>{for(let s=0;s<e.board.length;s++)for(let i=0;i<e.board[0].length;i++)if(t.r!=s&&t.c!=i){const o=b.getPossibleMoves(e,{r:s,c:i});for(let e=0;e<o.length;e++)if(o[e].r==t.r&&o[e].c==t.c)return!0}return!1}),b.isInCheckmate=((e,t)=>{const s=b.getPossibleMoves(e,t);if(b.isInCheck(e,t)){let t=!0;console.log("isInCheckmate possibleMoves",s);for(let i=0;i<s.length;i++)t=t&&b.isInCheck(e,s[i]);if(t)return!0}return!1}),b.kingCanCastleWithGivenRook=((e,t,s)=>{const i=e.board[t.r][t.c],o=e.board[s.r][s.c];if(b.getType(i).name!=(new g).name||b.getType(o).name!=(new v).name||0!=b.getNumMoves(i)||0!=b.getNumMoves(o))return!1;if(p.isPieceOfCurrentPlayer(e,t)&&p.isPieceOfCurrentPlayer(e,s)&&p.isBoxOnBoard(e,s)&&t!=s){let i=s.c-t.c>0?1:-1,o=Math.abs(s.c-t.c);for(let s=t.c+i;o-- >1;s+=i)if(!p.isEmpty(e,{r:t.r,c:s}))return!1;return!0}}),b.castleKingWithGivenRook=((e,t,s)=>{let i=s.c-t.c>0?1:-1,o=0;return 3==Math.abs(s.c-t.c)?o=2:4==Math.abs(s.c-t.c)&&(o=3),e[t.r][t.c+i*o]=Object.assign({},e[t.r][t.c]),e[t.r][t.c]=" ",e[s.r][s.c-i*o]=Object.assign({},e[s.r][s.c]),e[s.r][s.c]=" ",e}),b.getSetOfAllPossibleMovesForPlayer=((e,t)=>{let s=new Set;for(let i=0;i<e.board.length;i++)for(let o=0;o<e.board[0].length;o++)if(!p.isPieceOfGivenPlayer(e,t,{r:i,c:o})&&!p.isEmpty(e,{r:i,c:o})){const t=b.getPossibleMoves(e,{r:i,c:o});for(let e=0;e<t.length;e++)s.add(t[e])}return s}),b.randomDefensiveMove=(e=>{const t=0==e.player?1:0;return b.getSetOfAllPossibleMovesForPlayer(e,t)}),b.isACapture=((e,t,s)=>{const i=e.board[t.r][t.c],o=b.getNumMoves(i),r=b.getType(i);if("function"==typeof r.getPossibleMoves&&!isNaN(o)){if(r.getPossibleMoves(e,t,o)(s)&&!p.isPieceOfCurrentPlayer(e,s)&&!p.isEmpty(e,s))return!0}return!1});const f=new class{constructor(e,t){this.store=e,this.view=t,this._selectedBox=i(-1),this._lastSelectedBox=i(-1),this._selectedCapturedPiece=o(null),this.view.bindUndoMove(this.undoMove.bind(this)),this.view.bindRedoMove(this.redoMove.bind(this))}showBoardAndBindBoxes(){let e=this.store.getLocalStorage().liveBoard;this.view.showBoard(e);for(let e=0;e<8;e++)for(let t=0;t<8;t++){let s=this.view.get$board().children[0].children[e].children[t];this.view.bindSelectBox(s,this.selectBox.bind(this))}}showAndBindCapturedPieces(){let e=this.store.getLocalStorage().liveCaptures;this.view.showCaptures(e);let t=0,s=0;for(let i=0;i<e.length;i++)if(e[i].title&&0==e[i].title.indexOf("black")){let e=this.view.get$capturedblack().children[0].children[s++];void 0!=e&&this.view.bindCapturedPiece(e,i,this.selectCapturedPiece.bind(this))}else if(e[i].title&&0==e[i].title.indexOf("white")){let e=this.view.get$capturedwhite().children[0].children[t++];void 0!=e&&this.view.bindCapturedPiece(e,i,this.selectCapturedPiece.bind(this))}}selectBox(e){if(this._lastSelectedBox=this._selectedBox,this._selectedBox=c(e),this.store.selectBox(this._selectedBox.pos),this._lastSelectedBox.pos==this._selectedBox.pos)return;let t=void 0;if(null!=this._lastSelectedBox.piece&&(t=this.store.locationIfCanMove(a(this._lastSelectedBox),a(this._selectedBox))),null!=this._lastSelectedBox.piece&&0!=t)this.store.movePiece(a(this._lastSelectedBox),a(this._selectedBox)),this.store.unselectBox(this._lastSelectedBox.pos),this.store.updatePossibleMoves(null),this._lastSelectedBox=i(-1),this.store.canPromote({r:this._selectedBox.r,c:this._selectedBox.c})&&alert("Promotion possible: Select the promotable pawn, then any piece of the same color as the promotable pawn to complete the promotion."),this.store.unselectBox(this._selectedBox.pos),this._selectedBox=i(-1);else if(null!=this._lastSelectedBox.piece&&null!=this._lastSelectedBox.piece.title&&null!=this._selectedBox.piece&&null!=this._selectedBox.piece.title&&this.store.promoteIfPossible({r:this._lastSelectedBox.r,c:this._lastSelectedBox.c},{r:this._selectedBox.r,c:this._selectedBox.c})||null!=this._selectedCapturedPiece&&null!=this._selectedCapturedPiece.title&&null!=this._lastSelectedBox.piece&&null!=this._lastSelectedBox.piece.title&&this.store.promoteIfPossible({r:this._lastSelectedBox.r,c:this._lastSelectedBox.c},void 0,this._selectedCapturedPiece))-1!=this._selectedBox.pos&&this.store.unselectBox(this._selectedBox.pos),-1!=this._lastSelectedBox.pos&&this.store.unselectBox(this._lastSelectedBox.pos),this.store.updatePossibleMoves(null),this._lastSelectedBox=i(-1),this._selectedBox=i(-1);else if(null!=this._selectedBox.piece){this.store.updatePossibleMoves(null);const e=this.store.getPossibleMoves(a(this._selectedBox));this.store.updatePossibleMoves(e),-1!=this._lastSelectedBox.pos&&this.store.unselectBox(this._lastSelectedBox.pos),this._lastSelectedBox=i(-1)}else this.store.updatePossibleMoves(null),-1!=this._lastSelectedBox.pos&&this.store.unselectBox(this._lastSelectedBox.pos),this._lastSelectedBox=i(-1),this.store.canPromote({r:this._selectedBox.r,c:this._selectedBox.c}),-1!=this._selectedBox.pos&&this.store.unselectBox(this._selectedBox.pos),this._selectedBox=i(-1);-1!=this._selectedCapturedPiece.capturedIdx&&this.store.unSelectCapturedPiece(this._selectedCapturedPiece.capturedIdx),this.showAndBindCapturedPieces(),this.showBoardAndBindBoxes()}selectCapturedPiece(e,t){-1!=this._selectedCapturedPiece.capturedIdx&&this.store.unSelectCapturedPiece(this._selectedCapturedPiece.capturedIdx),null==this._lastSelectedBox.piece&&null==this._selectedBox.piece||(this.store.updatePossibleMoves(null),-1!=this._lastSelectedBox.pos&&this.store.unselectBox(this._lastSelectedBox.pos),-1!=this._lastSelectedBox.pos&&this.store.unselectBox(this._selectedBox.pos),this._lastSelectedBox=i(-1),this._lastSelectedBox=i(-1)),this._selectedCapturedPiece=n(e),this._selectedCapturedPiece.capturedIdx=t,this.store.selectCapturedPiece(t),this.showAndBindCapturedPieces(),this.showBoardAndBindBoxes()}undoMove(){0!=this.store.getLocalStorage().liveHistory.length&&(this.store.updatePossibleMoves(null),-1!=this._lastSelectedBox.pos&&this.store.unselectBox(this._lastSelectedBox.pos),-1!=this._selectedBox.pos&&this.store.unselectBox(this._selectedBox.pos),-1!=this._selectedCapturedPiece.capturedIdx&&this.store.unSelectCapturedPiece(this._selectedCapturedPiece.capturedIdx),this._selectedBox=i(-1),this._lastSelectedBox=i(-1),this._selectedCapturedPiece=o(null),this.store.undoMove(),this.showAndBindCapturedPieces(),this.showBoardAndBindBoxes())}redoMove(){0!=this.store.getLocalStorage().liveRedoHistory.length&&(this.store.updatePossibleMoves(null),-1!=this._lastSelectedBox.pos&&this.store.unselectBox(this._lastSelectedBox.pos),-1!=this._selectedBox.pos&&this.store.unselectBox(this._selectedBox.pos),-1!=this._selectedCapturedPiece.capturedIdx&&this.store.unSelectCapturedPiece(this._selectedCapturedPiece.capturedIdx),this._selectedBox=i(-1),this._lastSelectedBox=i(-1),this._selectedCapturedPiece=o(null),this.store.redoMove(),this.showAndBindCapturedPieces(),this.showBoardAndBindBoxes())}}(new class{constructor(e,t){this.liveStore={liveBoard:[],livePlayer:-1,liveCaptures:[],liveHistory:[],liveRedoHistory:[],prevLiveStore:{liveBoard:[],livePlayer:-1,liveCaptures:[],liveHistory:[],liveRedoHistory:[],prevLiveStore:void 0,redoLiveStore:void 0},redoLiveStore:{liveBoard:[],livePlayer:-1,liveCaptures:[],liveHistory:[],liveRedoHistory:[],prevLiveStore:void 0,redoLiveStore:void 0}},this.localStorage=window.localStorage,this.initializeBoard=(()=>{const e=o("whiteking"),t=o("whitequeen"),s=o("whitebishop"),r=o("whiteknight"),l=o("whiterook"),c=o("whitepawn"),n=o("blackking"),a=o("blackqueen"),d=o("blackbishop"),h=o("blackknight"),u=o("blackrook"),p=o("blackpawn"),v=function(){const e=[];for(let t=0;t<64;t++)e[t]=i(t);return e}();v[0].piece=Object.assign({},u),v[1].piece=Object.assign({},h),v[2].piece=Object.assign({},d),v[3].piece=Object.assign({},a),v[4].piece=Object.assign({},n),v[5].piece=Object.assign({},d),v[6].piece=Object.assign({},h),v[7].piece=Object.assign({},u);for(let e=8;e<16;e++)v[e].piece=Object.assign({},p);for(let e=48;e<56;e++)v[e].piece=Object.assign({},c);return v[56].piece=Object.assign({},l),v[57].piece=Object.assign({},r),v[58].piece=Object.assign({},s),v[59].piece=Object.assign({},t),v[60].piece=Object.assign({},e),v[61].piece=Object.assign({},s),v[62].piece=Object.assign({},r),v[63].piece=Object.assign({},l),v});let s=this.initializeBoard(),l=r,c=[],n=[],a=[];this.liveStore={liveBoard:s,livePlayer:l,liveCaptures:c,liveHistory:n,liveRedoHistory:a,prevLiveStore:{liveBoard:s,livePlayer:l,liveCaptures:c,liveHistory:n,liveRedoHistory:a,prevLiveStore:void 0,redoLiveStore:void 0},redoLiveStore:{liveBoard:s,livePlayer:l,liveCaptures:c,liveHistory:n,liveRedoHistory:a,prevLiveStore:void 0,redoLiveStore:void 0}},t&&t()}getLocalStorage(){const e=null!==this.localStorage.getItem(name)?String(this.localStorage.getItem(name)):JSON.stringify(this.liveStore);return this.liveStore||JSON.parse(e)}setLocalStorage(e,t,s,i,o,c,n){Array.isArray(e)&&(this.liveStore.liveBoard=e),t!==r&&t!==l||(this.liveStore.livePlayer=t),Array.isArray(s)&&(this.liveStore.liveCaptures=s),Array.isArray(i)&&(this.liveStore.liveHistory=i),Array.isArray(o)&&(this.liveStore.liveRedoHistory=o),void 0!=c&&(this.liveStore.prevLiveStore=c),void 0!=n&&(this.liveStore.redoLiveStore=n),localStorage.setItem(name,JSON.stringify(this.liveStore))}convertFrontToBackEncoding(e,t){let s="";switch(e){case"whitepawn":s="P";break;case"whiterook":s="R";break;case"whiteknight":s="H";break;case"whitebishop":s="B";break;case"whitequeen":s="Q";break;case"whiteking":s="K";break;case"blackpawn":s="p";break;case"blackrook":s="r";break;case"blackknight":s="h";break;case"blackbishop":s="b";break;case"blackqueen":s="q";break;case"blackking":s="k"}return s=s?s+t:s}convertBoardToGameState(e){let t=e||this.getLocalStorage().liveBoard;const s={board:Array(8),numRows:8,numCols:8,playerWhite:0,playerBlack:1,player:this.getLocalStorage().livePlayer};for(let e=0;e<s.board.length;e++){s.board[e]=[];for(let t=0;t<8;t++)s.board[e].push(" ");for(let i=0;i<s.board[e].length;i++){const o=t[8*e+i].piece;null!==o&&(s.board[e][i]=this.convertFrontToBackEncoding(o.title,o.timesMoved))}}return s}getEnPassantLocationIfPossible(e,t,s){const i=8*e.r+e.c,o=this.getLocalStorage(),l=t||o.liveBoard,c=s||o.liveHistory;if(l[i].piece&&0!=c.length){const t=o.livePlayer==r?-1:1,s=o.livePlayer==r?"white":"black",n=c[c.length-1].srcPiece;if(-1!=l[i].piece.title.indexOf("pawn")&&-1!=n.title.indexOf("pawn")&&(-1==n.title.indexOf(s)||n.r==l[i].piece.r&&n.c==l[i].piece.c)&&2==Math.abs(c[c.length-1].src.r-c[c.length-1].dst.r)&&c[c.length-1].dst.r==e.r&&1==Math.abs(c[c.length-1].dst.c-e.c)){const s={move:void 0,capture:void 0};return s.move={r:e.r+t,c:c[c.length-1].dst.c},s.capture=c[c.length-1].dst,s}}}locationIfIsCapture(e,t,s){const i=this.getEnPassantLocationIfPossible(t);return i&&i.move.c==s.c&&i.move.r==s.r?i.capture:!!b.isACapture(e,t,s)&&s}movePiece(e,t,s){let i=s||this.getLocalStorage(),o=i.liveBoard;const c=this.convertBoardToGameState(o);let n=i.livePlayer,a=i.liveCaptures,d=8*t.r+t.c;const h=8*e.r+e.c;let u=o[d].piece;const p=o[h].piece,v=this.locationIfIsCapture(c,e,t);if(0!=v&&(u=o[d=8*v.r+v.c].piece,o[d].piece.capturedIdx=a.length,a.push(o[d].piece),o[d].piece=null),b.kingCanCastleWithGivenRook(c,e,t)){let s=t.c-e.c>0?1:-1,i=0,r=0;3==Math.abs(t.c-e.c)?(i=2,r=2):4==Math.abs(t.c-e.c)&&(i=2,r=3),o[h+s*i].piece=o[h].piece,o[h+s*i].piece.timesMoved++,o[h].piece=null,o[d-s*r].piece=o[d].piece,o[d].piece=null}else void 0!=this.getEnPassantLocationIfPossible(e)?(this.getEnPassantLocationIfPossible(e),o[8*t.r+t.c].piece=o[8*e.r+e.c].piece,o[8*t.r+t.c].piece.timesMoved++,o[8*e.r+e.c].piece=null,u=null):(o[d].piece=o[h].piece,o[d].piece.timesMoved++,o[h].piece=null);let g=i.liveHistory;g.push({src:e,dst:t,srcPiece:p,dstPiece:u,move:g.length});const f=Object.assign({},i);f.prevLiveStore=void 0,n=n==r?l:r,this.setLocalStorage(o,n,a,g,[],f),this.canPromote(e)&&console.log("Promotion possible in Store movePiece")}selectBox(e){let t=this.getLocalStorage().liveBoard;t[e].selected=!0,this.setLocalStorage(t)}unselectBox(e){let t=this.getLocalStorage().liveBoard;t[e].selected=!1,this.setLocalStorage(t)}selectCapturedPiece(e){let t=this.getLocalStorage().liveCaptures;t[e].selectedCapture=!0,this.setLocalStorage(void 0,void 0,t)}unSelectCapturedPiece(e){let t=this.getLocalStorage().liveCaptures;t[e].selectedCapture=!1,this.setLocalStorage(void 0,void 0,t)}locationIfCanMove(e,t){if(!e||!t)return!1;const s=this.convertBoardToGameState(),i=b.isPossibleToMoveTo(s,e)(t),o=this.getEnPassantLocationIfPossible(e);return!!(void 0!=o&&o.move.r==t.r&&o.move.c==t.c||i)&&t}getPossibleMoves(e){const t=this.convertBoardToGameState();let s=b.getPossibleMoves(t,e);const i=this.getEnPassantLocationIfPossible(e);return void 0!=i&&s.push(i.move),s}updatePossibleMoves(e){let t=this.getLocalStorage().liveBoard;switch(e){case null:t=t.map(e=>(e.possibleDest=!1,e)),this.setLocalStorage(t);break;default:e.forEach(e=>{t[8*e.r+e.c].possibleDest=!0}),this.setLocalStorage(t)}}canPromote(e){let t=this.getLocalStorage().liveBoard,s=this.getLocalStorage().liveHistory,i=s[s.length-1];const o=t[8*e.r+e.c].piece;return null!=o&&-1!=o.title.indexOf("pawn")&&(0==e.r&&0==o.title.indexOf("white")||7==e.r&&0==o.title.indexOf("black"))&&i.dst.r==e.r&&i.dst.c==e.c}promoteIfPossible(e,t,s){let i=this.getLocalStorage().liveBoard,o=this.getLocalStorage().liveHistory,c=this.getLocalStorage().livePlayer,n=o[o.length-1];const a=i[8*e.r+e.c].piece,d=s||i[8*t.r+t.c].piece;if(null!=a&&-1!=a.title.indexOf("pawn")&&null!=d&&a.title.indexOf("white")==d.title.indexOf("white")&&(0==e.r&&0==a.title.indexOf("white")||7==e.r&&0==a.title.indexOf("black"))&&n.dst.r==e.r&&n.dst.c==e.c&&-1==d.title.indexOf("pawn")&&-1==d.title.indexOf("king")){i[8*e.r+e.c].piece.title=d.title;const t=n.move;return o.push({src:e,dst:e,srcPiece:a,dstPiece:a,move:t}),c=c==r?l:r,this.setLocalStorage(i,c,void 0,o),!0}return!1}undoMove(){}redoMove(){}loadBoard(){}saveBoard(){}}("chess-game-typescript-es6"),new class{constructor(e){this.template=e,this.$board=d(".chessboard"),this.$capturedwhite=d(".capturedwhite"),this.$capturedblack=d(".capturedblack"),this.$main=d(".main"),this.$undobtn=d(".undo"),this.$redobtn=d(".redo")}get$board(){return this.$board}get$capturedwhite(){return this.$capturedwhite}get$capturedblack(){return this.$capturedblack}showBoard(e){this.$board.replaceChild(this.template.Board(e),this.$board.firstChild)}showCaptures(e){this.$capturedwhite.replaceChild(this.template.CapturedWhite(e),this.$capturedwhite.firstChild),this.$capturedblack.replaceChild(this.template.CapturedBlack(e),this.$capturedblack.firstChild)}bindSelectBox(e,t){h(e,"click",({target:s})=>t(e))}bindCapturedPiece(e,t,s){h(e,"click",()=>s(e,t))}bindUndoMove(e){}bindRedoMove(e){}}(new class{Board(e){let t=document.createElement("board"),s=0;for(let i=0;i<8;i++){let o=document.createElement("tr");for(let t=0;t<8;t++){let r=document.createElement("td");r.setAttribute("data-pos",String(s));const l=e[8*i+t],c=l.piece;if(c){let e=document.createElement("div");e.setAttribute("class",c.title),r.appendChild(e)}l.selected&&r.setAttribute("class","selected"),l.possibleDest&&r.setAttribute("class","possibleDest"),o.appendChild(r),s++}t.appendChild(o)}return t}Captured(e,t){let s=document.createElement("tr");for(let i=0;i<t.length;i++){const o=t[i];if(o.title&&0==o.title.indexOf(e)){let e=document.createElement("td"),t=document.createElement("div");t.setAttribute("class",o.title),o.selectedCapture&&t.setAttribute("class",o.title+" selectedCapture"),e.appendChild(t),s.appendChild(e)}}return s}CapturedWhite(e){return this.Captured("white",e)}CapturedBlack(e){return this.Captured("black",e)}}));h(window,"load",()=>f.showBoardAndBindBoxes())},function(e,t){var s,i,o=e.exports={};function r(){throw new Error("setTimeout has not been defined")}function l(){throw new Error("clearTimeout has not been defined")}function c(e){if(s===setTimeout)return setTimeout(e,0);if((s===r||!s)&&setTimeout)return s=setTimeout,setTimeout(e,0);try{return s(e,0)}catch(t){try{return s.call(null,e,0)}catch(t){return s.call(this,e,0)}}}!function(){try{s="function"==typeof setTimeout?setTimeout:r}catch(e){s=r}try{i="function"==typeof clearTimeout?clearTimeout:l}catch(e){i=l}}();var n,a=[],d=!1,h=-1;function u(){d&&n&&(d=!1,n.length?a=n.concat(a):h=-1,a.length&&p())}function p(){if(!d){var e=c(u);d=!0;for(var t=a.length;t;){for(n=a,a=[];++h<t;)n&&n[h].run();h=-1,t=a.length}n=null,d=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===l||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function v(e,t){this.fun=e,this.array=t}function g(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var s=1;s<arguments.length;s++)t[s-1]=arguments[s];a.push(new v(e,t)),1!==a.length||d||c(p)},v.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,s){(function(e){function s(e,t){for(var s=0,i=e.length-1;i>=0;i--){var o=e[i];"."===o?e.splice(i,1):".."===o?(e.splice(i,1),s++):s&&(e.splice(i,1),s--)}if(t)for(;s--;s)e.unshift("..");return e}var i=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,o=function(e){return i.exec(e).slice(1)};function r(e,t){if(e.filter)return e.filter(t);for(var s=[],i=0;i<e.length;i++)t(e[i],i,e)&&s.push(e[i]);return s}t.resolve=function(){for(var t="",i=!1,o=arguments.length-1;o>=-1&&!i;o--){var l=o>=0?arguments[o]:e.cwd();if("string"!=typeof l)throw new TypeError("Arguments to path.resolve must be strings");l&&(t=l+"/"+t,i="/"===l.charAt(0))}return t=s(r(t.split("/"),function(e){return!!e}),!i).join("/"),(i?"/":"")+t||"."},t.normalize=function(e){var i=t.isAbsolute(e),o="/"===l(e,-1);return(e=s(r(e.split("/"),function(e){return!!e}),!i).join("/"))||i||(e="."),e&&o&&(e+="/"),(i?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(r(e,function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},t.relative=function(e,s){function i(e){for(var t=0;t<e.length&&""===e[t];t++);for(var s=e.length-1;s>=0&&""===e[s];s--);return t>s?[]:e.slice(t,s-t+1)}e=t.resolve(e).substr(1),s=t.resolve(s).substr(1);for(var o=i(e.split("/")),r=i(s.split("/")),l=Math.min(o.length,r.length),c=l,n=0;n<l;n++)if(o[n]!==r[n]){c=n;break}var a=[];for(n=c;n<o.length;n++)a.push("..");return(a=a.concat(r.slice(c))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){var t=o(e),s=t[0],i=t[1];return s||i?(i&&(i=i.substr(0,i.length-1)),s+i):"."},t.basename=function(e,t){var s=o(e)[2];return t&&s.substr(-1*t.length)===t&&(s=s.substr(0,s.length-t.length)),s},t.extname=function(e){return o(e)[3]};var l="b"==="ab".substr(-1)?function(e,t,s){return e.substr(t,s)}:function(e,t,s){return t<0&&(t=e.length+t),e.substr(t,s)}}).call(this,s(1))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,